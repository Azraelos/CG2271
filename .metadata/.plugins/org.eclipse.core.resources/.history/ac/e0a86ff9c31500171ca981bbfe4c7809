#include <Arduino.h>
#include <avr/io.h>
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>

#define STACK_SIZE 200
#define PIN_PTTM  0

SemaphoreHandle_t xSemaphore;
SemaphoreHandle_t xSemaphore2;
SemaphoreHandle_t xSemaphore3;

unsigned long debounceTime = 0;
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 200; // the debounce time; increase if the output flickers

int in = 0;
int out = 0;
int buffer[4] = { 0 };

void producer(void *p)
{
	while (1) {
		Serial.println("producer");
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
			xSemaphoreTake(xSemaphore3, portMAX_DELAY);
			xSemaphoreTake(xSemaphore2, portMAX_DELAY);
			buffer[in] = analogRead(PIN_PTTM);
			in = (in + 1) % 4;

			xSemaphoreGive(xSemaphore2);
			xSemaphoreGive(xSemaphore3);
		}
	}
}

void consumer(void *p)
{
	const TickType_t xFrequency = 5000;
	TickType_t xLastWakeTime = xTaskGetTickCount();

	while (1) {
		Serial.println("consumer");
		xSemaphoreTake(xSemaphore3, portMAX_DELAY);
		xSemaphoreTake(xSemaphore2, portMAX_DELAY);
		Serial.println(buffer[out]);
		out = (out + 1) % 4;
		xSemaphoreGive(xSemaphore2);
		xSemaphoreGive(xSemaphore3);
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
	}
}

void int0ISR() {
	static BaseType_t xHigherPriorityTaskWoken;
	debounceTime = millis();
	xHigherPriorityTaskWoken = pdFALSE;
	// If interrupts come faster than 10ms, assume it's a bounce and ignore
	if (debounceTime - lastDebounceTime > debounceDelay) {
		lastDebounceTime = debounceTime;
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
	}
	if (xHigherPriorityTaskWoken == pdTRUE) {
		taskYIELD();
	}
}

void setup() {
	Serial.begin(115200);
	attachInterrupt(digitalPinToInterrupt(2), int0ISR, RISING);
	xSemaphore = xSemaphoreCreateBinary();
	xSemaphore2 = xSemaphoreCreateMutex();
	xSemaphore3 = xSemaphoreCreateCounting(4, 0);
	//xSemaphoreGive(xSemaphore2);
}

void loop() {
	Serial.println("test");
	/* create two tasks one with higher priority than the other */
	xTaskCreate(producer, "Task1", STACK_SIZE, NULL, 1, NULL);
	xTaskCreate(consumer, "Task2", STACK_SIZE, NULL, 1, NULL);
	/* start scheduler */
	vTaskStartScheduler();
}
