#include <Arduino.h>
#include <avr/io.h>
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>

#define STACK_SIZE 200
#define LED_PIN      7
#define LED_PIN_2    6

unsigned long debounceTime = 0;
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 100; // the debounce time; increase if the output flickers

unsigned long debounceTime_2 = 0;
unsigned long lastDebounceTime_2 = 0; // the last time the output pin was toggled
unsigned long debounceDelay_2 = 100; // the debounce time; increase if the output flickers

void int0task(void *p)
{
	for (int count = 0; count < 7; count++) {
		digitalWrite(LED_PIN, HIGH);
		delay(125);
		digitalWrite(LED_PIN, LOW);
		delay(125);
	}
}

void int1task(void *p)
{
	for (int count = 0; count < 6; count++) {
		digitalWrite(LED_PIN_2, HIGH);
		delay(250);
		digitalWrite(LED_PIN_2, LOW);
		delay(250);
	}
}

void int0ISR() {
	debounceTime = millis();
	// If interrupts come faster than 5ms, assume it's a bounce and ignore
	if (debounceTime - lastDebounceTime > debounceDelay) {
		lastDebounceTime = debounceTime;

		Serial.println("isr0");
	}
}

void int1ISR() {
	debounceTime_2 = millis();
	// If interrupts come faster than 5ms, assume it's a bounce and ignore
	if (debounceTime_2 - lastDebounceTime_2 > debounceDelay_2) {
		lastDebounceTime_2 = debounceTime_2;

		Serial.println("isr1");
	}
}

void setup() {
	Serial.begin(115200);
	pinMode(LED_PIN, OUTPUT);
	pinMode(LED_PIN_2, OUTPUT);
	attachInterrupt(digitalPinToInterrupt(2), int0ISR, RISING);
	attachInterrupt(digitalPinToInterrupt(3), int1ISR, RISING);

}

void loop() {
	/* create two tasks one with higher priority than the other */
	xTaskCreate(int0task, "Task1", STACK_SIZE, NULL, 2, NULL);
	xTaskCreate(int1task, "Task2", STACK_SIZE, NULL, 1, NULL);
	/* start scheduler */
	vTaskStartScheduler();
}
